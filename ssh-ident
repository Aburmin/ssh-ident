#!/usr/bin/python

"""Wrapper around ssh to prepare ssh-agent and load identities.

This script starts agents and loads keys on demand, when they are
first needed. All you have to do is modify your .bashrc to have:

  alias ssh='/path/to/ssh-ident'

or add:

  ln -s /path/to/ssh-ident ~/bin/ssh

and have ~/bin/ssh first in your PATH.

Beside loading agent and keys on demand, ssh-ident is able to use different 
agents and maintain multiple identities for the same account, while using
them automatically depending on the host you are connecting to or path you
are ussing ssh from.

This allows for more isolation especially when forwarding identities
or using sites like github, gitorious or unfuddle.

Works if your home directory is on NFS, prevents multiple agents from running,
automatically shares the same agents across login sessions.

If you configure multiple identites, when you run this script, it will:

1) Check the arguments provided to ssh and the current working
   directory against a list of patterns defined in the
   ~/.ssh-ident configuration file.

2) Based on those patterns, the script will determine an ssh-agent
   to use, and a list of keys that need to be loaded in the agent.

3) It will then run ssh as usual, with the correct enviornment
   variables set.

Note that if no ~/.ssh-ident configuration file is provided, it will
just load agents and keys on demand from the default ssh configuration
directories.


Example of use
==============

In .bashrc, I have:

  alias ssh=/home/ccontavalli/scripts/ssh-ident

all I have to do now is logout, login and then:

  ssh remotehost

will load an agent (if necessary), and ask the passphrase for my key
(if not loaded yet). If I ssh to somewhere else now, the already loaded
agent and keys will be used.

To have multiple identities, you start by creating a ~/.ssh-ident file.
In it, you should add something like:

  # This means that if I launch ssh from a directory that has 'mod-xslt'
  # in the name, the 'personal' identity has to be used.
  MATCH_PATH = [
    # (directory, identity)
    (r"mod-xslt", "personal"),
    (r"ssh-ident", "personal"),
    (r"opt/work", "work"),
    (r"opt/private", "secret"),
  ]
  
  # This means that if any of ssh arguments have 'cweb' in it, the 'personal'
  # identity has to be used. For example: "ssh myhost.cweb.com" will have cweb
  # in argv, and the "personal" identity will be used.
  MATCH_ARGV = [
    (r"cweb", "personal"),
    (r"corp", "work"),
  ]

  # Note that if no match is found, the DEFAULT_IDENTITY is used. This is
  # generally your loginname, no need to change it.
  # DEFAULT_IDENTITY = "foo"

  # This is entirely optional.
  SSH_ADD_OPTIONS = {
    # Regardless, ask for confirmation before using any of the
    # work keys.
    "work": "-c",
    # Forget about secret keys after ten minutes. ssh-ident will
    # automatically ask you your passphrase again if they are needed.
    "secret": "-t 600",
  }

Now if I run:

  ssh corp.mywemployer.com

ssh-ident will be invoked instead, and:

  1) check ssh argv, determine that the "work" identity has to be used.
  2) look in ~/.ssh/agents, for a "work" agent loaded. If there is no
     agent, it will prepare one.
  3) look in ~/.ssh/identities/work/* for a list of keys to load for
     this identity. It will try to load any key that is not already
     loaded in the agent.
  4) finally run ssh with the environment setup such that it will
     have access only to the agent for the identity work, and the
     corresponding keys.

Setting up identities
=====================

To setup identities with the default parameters, you should:

1) Create the directory where all the identities and agents
   will be kept:

    $ mkdir -p ~/.ssh/identities; chmod u=rwX,go= -R ~/.ssh

2) Create identities, for example:

    $ mkdir -p ~/.ssh/identities/personal
    $ mkdir -p ~/.ssh/identities/work
    $ mkdir -p ~/.ssh/identities/secret

3) Generate (or copy) keys for those identities:

    # Default keys are for my personal account
    $ cp ~/.ssh/id_rsa* ~/.ssh/identities/personal

    # Generate keys to be used for work only, rsa
    $ ssh-keygen -t rsa -b 4096 -f ~/.ssh/identities/work/id_rsa

    ...

Note that ssh-ident needs to access both your private and public
key. Note also that it identifies public keys by the .pub extension.
All files in your identities subdirectories will be considered keys.

If you want to only load keys that have "key" in the name, you can
add in your .ssh-ident:

      PATTERN_KEYS = "key"

The default is:
      "PATTERN_KEYS": r"/(id_.*|identity.*|ssh[0-9]-.*)"

You can also redefine:
      DIR_IDENTITIES = "$HOME/.ssh/identities"
      DIR_AGENTS = "$HOME/.ssh/agents"

To point somewhere else if you so desire.
"""

import glob
import sys
import errno
import os
import getpass
import re
import socket
import subprocess
import collections


class Config(object):
  """Holds and loads users configurations."""

  defaults = {
      # Where to find the per-user configuration.
      "FILE_USER_CONFIG": "$HOME/.ssh-ident",

      # Where to find all the identities for the user.
      "DIR_IDENTITIES": "$HOME/.ssh/identities",
      # Where to keep the information about each running agent.
      "DIR_AGENTS": "$HOME/.ssh/agents",

      # How to identify key files in the identities directory.
      "PATTERN_KEYS": r"/(id_.*|identity.*|ssh[0-9]-.*)",
      # Complete path of full ssh binary to use.
      "BINARY_SSH": "/usr/bin/ssh",

      # Which identity to use by default if we cannot tell from
      # the current working directory and/or argv. 
      "DEFAULT_IDENTITY": "$USER",

      # Those should really be overridden by the user. Look
      # at the documentation for more details.
      "MATCH_PATH": [],
      "MATCH_ARGV": [],

      # Dictionary with identity as a key, allows to specify
      # per identity options when using ssh-add.
      "SSH_ADD_OPTIONS": {},
      # ssh-add default options.
      "SSH_ADD_DEFAULT_OPTIONS": "",
  }

  def __init__(self):
    self.values = {}

  def Load(self):
    """Load configurations from the default user file."""
    path = self.Get("FILE_USER_CONFIG")
    variables = {}
    try: 
      execfile(path, {}, variables)
    except IOError:
      return self
    self.values = variables
    return self

  @staticmethod
  def Expand(value):
    """Expand environment variables or ~ in string parameters."""
    if isinstance(value, str):
      return os.path.expanduser(os.path.expandvars(value))
    return value
 
  def Get(self, parameter):
    """Returns the value of a parameter, or causes the script to exit."""
    if parameter in self.values:
      return self.Expand(self.values[parameter])
    if parameter in self.defaults:
      return self.Expand(self.defaults[parameter])

    print >>sys.stderr, (
        "Parameter '%s' needs to be defined in "
        "config file or defaults" % parameter)
    sys.exit(2)

def FindIdentityInList(elements, identities):
  """Matches a list of identities to a list of elements.

  Args:
    elements: iterable of strings, arbitrary strings to match on.
    identities: iterable of (string, string), with first string
      being a regular expression, the second string being an identity.

  Returns:
    The identity specified in identities for the first regular expression
    matching the first element in elements.
  """
  for element in elements:
    for regex, identity in identities:
      if re.search(regex, element):
        return identity
  return None

def FindIdentity(argv, config):
  """Returns the identity to use based on current directory or argv.

  Args:
    argv: iterable of string, argv passed to this program.
    config: instance of an object implementing the same interface as
        the Config class.

  Returns:
    string, the name of the identity to use.
  """
  paths = set([os.getcwd(), os.path.abspath(os.getcwd()), os.path.normpath(os.getcwd())])
  return (
      FindIdentityInList(argv, config.Get("MATCH_ARGV")) or
      FindIdentityInList(paths, config.Get("MATCH_PATH")) or
      config.Get("DEFAULT_IDENTITY"))

def FindKeys(identity, config):
  """Finds all the private and public keys associated with an identity.

  Args:
    identity: string, name of the identity to load strings of.
    config: object implementing the Config interface, providing configurations
        for the user.

  Returns:
    dict, {"key name": {"pub": "/path/to/public/key", "priv":
    "/path/to/private/key"}}, for each key found, the path of the public
    key and private key. The key name is just a string representing the
    key. Note that for a given key, it is not guaranteed that both the
    public and private key will be found.
    The return value is affected by DIR_IDENTITIES and PATTERN_KEYS
    configuration parameters.
  """
  directories = [os.path.join(config.Get("DIR_IDENTITIES"), identity)]
  if identity == getpass.getuser():
    directories.append(os.path.expanduser("~/.ssh"))

  pattern = re.compile(config.Get("PATTERN_KEYS"))
  found = collections.defaultdict(dict)
  for directory in directories:
    try:
      keyfiles = os.listdir(directory)
    except OSError, e:
      if e.errno == errno.ENOENT:
        continue
      raise

    for key in keyfiles:
      key = os.path.join(directory, key)
      if not os.path.isfile(key):
        continue
      if not pattern.search(key):
        continue

      kinds = (
          ("private", "priv"),
          ("public", "pub"),
          (".pub", "pub"),
          ("", "priv"),
      )
      for match, kind in kinds:
        if match in key:
          found[key.replace(match, "")][kind] = key
  
  if not found:
    print >>sys.stderr, "Warning: no keys found for identity %s in:" % identity
    print >>sys.stderr, directories

  return found 

class AgentManager(object):
  """Manages the ssh-agent for one identity."""

  def __init__(self, identity, config):
    """Initializes an AgentManager object.

    Args:
      identity: string, identity the ssh-agent managed by this instance of
          an AgentManager will control.
      config: object implementing the Config interface, allows access to
          the user configuration parameters.

    Attributes:
      identity: same as above.
      config: same as above.
      agents_path: directory where the config of all agents is kept.
      agent_file: the config of the agent corresponding to this identity.

    Parameters:
      DIR_AGENTS: used to compute agents_path.
      BINARY_SSH: path to the ssh binary.
    """
    self.identity = identity
    self.config = config
    self.agents_path = os.path.abspath(config.Get("DIR_AGENTS"))
    self.agent_file = self.GetAgentFile(self.agents_path, self.identity)

  def LoadUnloadedKeys(self, keys):
    """Loads all the keys specified that are not loaded.

    Args:
      keys: dict as returned by FindKeys.
    """
    toload = self.FindUnloadedKeys(keys)
    if toload:
      print >>sys.stderr, "Loading keys:\n    %s" % "\n    ".join(toload)
      self.LoadKeyFiles(toload)
    else:
      print >>sys.stderr, "All keys already loaded"

  def FindUnloadedKeys(self, keys):
    """Determines which keys have not been loaded yet.

    Args:
      keys: dict as returned by FindKeys.

    Returns:
      iterable of strings, paths to private key files to load.
    """
    loaded = set(self.GetLoadedKeys())
    toload = set()
    for key, config in keys.iteritems():
      if "pub" not in config:
        continue
      if "priv" not in config:
        continue

      fingerprint = self.GetPublicKeyFingerprint(config["pub"])
      if fingerprint in loaded:
        continue

      toload.add(config["priv"])
    return toload

  def LoadKeyFiles(self, keys):
    """Load all specified keys.

    Args:
      keys: iterable of strings, each string a path to a key to load.
    """
    keys = " ".join(keys)
    options = self.config.Get("SSH_ADD_OPTIONS").get(
        self.identity, self.config.Get("SSH_ADD_DEFAULT_OPTIONS"))
    self.RunShellCommandInAgent(self.agent_file, "ssh-add %s %s" % (options, keys))

  def GetLoadedKeys(self):
    """Returns an iterable of strings, each the fingerprint of a loaded key."""
    retval, stdout = self.RunShellCommandInAgent(self.agent_file, "ssh-add -l")
    if retval != 0:
      return []

    fingerprints = []
    for line in stdout.split("\n"):
      try:
        _, fingerprint, _ = line.split(" ", 2)
        fingerprints.append(fingerprint)
      except ValueError:
        continue
    return fingerprints

  @staticmethod
  def GetPublicKeyFingerprint(key):
    """Returns the fingerprint of a public key as a string."""
    retval, stdout = AgentManager.RunShellCommand("ssh-keygen -l -f %s |tr -s ' '" % key)
    if retval:
      return None

    try:
      _, fingerprint, _ = stdout.split(" ", 2)
    except ValueError:
      return None
    return fingerprint

  @staticmethod
  def GetAgentFile(path, identity):
    """Returns the path to an agent config file.

    Args:
      path: string, the path where agent config files are kept.
      identity: string, identity for which to load the agent.

    Returns:
      string, path to the agent file.
    """
    # Create the paths, if they do not exist yet.
    try:
      os.makedirs(path, 0700)
    except OSError, e:
      if e.errno != errno.EEXIST:
        raise OSError(
            "Cannot create agents directory, try manually with 'mkdir -p %s'" %
            path)

    # Use the hostname as part of the path just in case this is on NFS.
    agentfile = os.path.join(path, "agent-%s-%s" % (identity, socket.gethostname()))
    if os.access(agentfile, os.R_OK) and AgentManager.IsAgentFileValid(agentfile):
      print >>sys.stderr, "Agent for identity %s ready" % identity
      return agentfile

    print >>sys.stderr, "Preparing new agent for identity %s" % identity
    retval = subprocess.call(
        ["/usr/bin/env", "-i", "/bin/sh", "-c", "ssh-agent > %s" % agentfile])
    return agentfile

  @staticmethod
  def IsAgentFileValid(agentfile):
    """Returns true if the specified agentfile refers to a running agent."""
    retval, output = AgentManager.RunShellCommandInAgent(agentfile, "ssh-add -l >/dev/null 2>/dev/null") 
    if retval & 0xff not in [0, 1]:
      print >>sys.stderr, "Agent in %s not running" % agentfile
      return False
    return True

  @staticmethod
  def RunShellCommand(command):
    """Runs a shell command, returns (status, stdout), (int, string)."""
    command = ["/bin/sh", "-c", command]
    process = subprocess.Popen(command, stdout=subprocess.PIPE)
    stdout, stderr = process.communicate()
    return process.wait(), stdout

  @staticmethod
  def RunShellCommandInAgent(agentfile, command):
    """Runs a shell command with an agent configured in the environment."""
    command = ["/usr/bin/env", "-i", "/bin/sh", "-c",
               ". %s >/dev/null 2>/dev/null; %s" % (agentfile, command)]
    process = subprocess.Popen(command, stdout=subprocess.PIPE)
    stdout, stderr = process.communicate()
    return process.wait(), stdout

  @staticmethod
  def EscapeShellArguments(argv):
    """Escapes all arguments to the shell, returns a string."""
    escaped = []
    for arg in argv:
      escaped.append("'%s'" % arg.replace("'", "'\"'\"'"))
    return " ".join(escaped)

  def RunSSH(self, argv):
    """Execs ssh with the specified arguments."""
    command = ["/bin/sh", "-c", ". %s >/dev/null 2>/dev/null; exec %s %s" % (
               self.agent_file, self.config.Get("BINARY_SSH"),
               self.EscapeShellArguments(argv))]
    os.execv("/bin/sh", command) 

def main(argv):
  # Replace stdout and stderr with /dev/tty, so we don't mess up with scripts
  # that use ssh in case we error out or similar.
  sys.stdout = open("/dev/tty", "w")
  sys.stderr = open("/dev/tty", "w")

  config = Config().Load()
  identity = FindIdentity(argv, config)
  agent = AgentManager(identity, config)
  keys = FindKeys(identity, config)

  agent.LoadUnloadedKeys(keys)
  return agent.RunSSH(argv[1:])

if __name__ == "__main__":
  try:
    sys.exit(main(sys.argv))
  except KeyboardInterrupt:
    print >>sys.stderr, "Goodbye"
